use libra_smoke_tests::libra_smoke::LibraSmoke;

use libra_txs::submit_transaction::Sender;
use libra_types::legacy_types::{app_cfg::Profile, block::VDFProof};
use libra_wallet::account_keys;

// Scenario: a new user can start a new tower chain
// 1. a validator, Val 0, will create a new user Alice by transferring funds
// 2. Alice can use a Proof 0, the first miner proof and successfully submit

/// Testing that we can get a swarm up with the current head.mrb
#[tokio::test(flavor = "multi_thread", worker_threads = 1)]
async fn tower_newbie() -> anyhow::Result<()> {
    // create libra swarm and get app config for the first validator
    let mut ls = LibraSmoke::new(Some(1))
        .await
        .expect("could not start libra smoke");
    let mut val_app_cfg = ls.first_account_app_cfg()?;

    // get an appcfg struct from Alice's mnemonic
    let alice = account_keys::get_keys_from_mnem("talent sunset lizard pill fame nuclear spy noodle basket okay critic grow sleep legend hurry pitch blanket clerk impose rough degree sock insane purse".to_owned())?;
    let alice_acct = &alice.child_0_owner.account;

    // create an account for alice by transferring funds
    let mut s = Sender::from_app_cfg(&val_app_cfg, None).await?;
    let res = s
        .transfer(alice.child_0_owner.account, 10_000.0, false)
        .await?
        .unwrap();
    assert!(res.info.status().is_success());

    // alice submits the genesis fixture proof with mainnet difficulty
    let proof: VDFProof = serde_json::from_str(
        r#"{
      "height": 0,
      "elapsed_secs": 42552,
      "preimage": "87515d94a244235a1433d7117bc0cb154c613c2f4b1e67ca8d98a542ee3f59f500000000000000000074657374696e6764000000000000005ef74657374732072616765206163726f737320746865206e6174696f6e",
      "proof": "261581f8cbcdb643fb0d92bb90ed31abd45a0705b246097d79f3b2e790f2a0dcb659221dad7484d2c60811fb0000000000000000000000000000000000000000000100000000000000000000000000000000000000000001",
      "difficulty": 100,
      "security": 350
    }"#,
    )?;

    // let's reuse the validators AppCfg since it has all the connection info we want.
    let mut p = Profile::new(alice.child_0_owner.auth_key, alice.child_0_owner.account);
    assert!(alice_acct == &p.account);

    p.set_private_key(&alice.child_0_owner.pri_key);

    val_app_cfg.maybe_add_profile(p)?;

    let mut alice_sender = Sender::from_app_cfg(
        &val_app_cfg,
        Some(alice.child_0_owner.account.to_hex_literal()),
    )
    .await?;

    assert!(alice_acct == &alice_sender.local_account.address());

    let res = alice_sender.commit_proof(proof).await?;
    assert!(res.info.status().is_success());

    Ok(())
}
