// /// take an archive file path and parse into a writeset
// pub async fn archive_into_recovery(
//     archive_path: &PathBuf,
//     is_legacy: bool,
// ) -> Result<Vec<LegacyRecovery>, Error> {
//     let manifest_json = archive_path.join("state.manifest");

//     let backup = read_snapshot::read_from_json(&manifest_json)?;

//     let account_blobs = accounts_from_snapshot_backup(backup, archive_path).await?;
//     let r = if is_legacy {
//         println!("Parsing account state from legacy, Libra structs");
//         todo!();
//     } else {
//         println!("Parsing account state from Diem structs");
//         accounts_into_recovery(&account_blobs)?
//     };

//     Ok(r)
// }

use std::path::Path;

use diem_backup_cli::backup_types::state_snapshot::manifest::StateSnapshotBackup;
use diem_types::account_state::AccountState;

use crate::read_snapshot;
