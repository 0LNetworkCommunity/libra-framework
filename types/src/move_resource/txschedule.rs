use move_core_types::{
    ident_str,
    identifier::IdentStr,
    move_resource::{MoveResource, MoveStructType},
};
use serde::{Deserialize, Serialize};

/// Struct that represents a transaction schedule.
#[derive(Debug, Serialize, Deserialize)]
pub struct TxSchedule {
    scheduled: Vec<TimedTransfer>,
    veto: Vec<TimedTransfer>,
    paid: Vec<TimedTransfer>,
    guid_capability: GUIDCapability, // we need this for the MultiSig
}

impl MoveStructType for TxSchedule {
    const MODULE_NAME: &'static IdentStr = ident_str!("donor_voice");
    const STRUCT_NAME: &'static IdentStr = ident_str!("TxSchedule");
}

impl MoveResource for TxSchedule {}

#[derive(Debug, Serialize, Deserialize)]
pub struct TimedTransfer {
    uid: diem_api_types::U128, // copy of ID generated by MultiSig for the transaction
    deadline: diem_api_types::U64, // what epoch does the transaction execute
    tx: Payment,               // The transaction properties
    epoch_latest_veto_received: u64, // This is to check if we need to extend the deadline
}

impl MoveStructType for TimedTransfer {
    const MODULE_NAME: &'static IdentStr = ident_str!("donor_voice");
    const STRUCT_NAME: &'static IdentStr = ident_str!("TimedTransfer");
}

impl MoveResource for TimedTransfer {}

#[derive(Debug, Serialize, Deserialize)]
pub struct Payment {
    payee: diem_api_types::U128,
    value: diem_api_types::U64,
    description: Vec<u8>,
}

impl MoveStructType for Payment {
    const MODULE_NAME: &'static IdentStr = ident_str!("donor_voice");
    const STRUCT_NAME: &'static IdentStr = ident_str!("Payment");
}

impl MoveResource for Payment {}

#[derive(Debug, Serialize, Deserialize)]
pub struct GUIDCapability {
    addr: diem_api_types::U128,
}
impl MoveStructType for GUIDCapability {
    const MODULE_NAME: &'static IdentStr = ident_str!("account");
    const STRUCT_NAME: &'static IdentStr = ident_str!("GUIDCapability");
}

impl MoveResource for GUIDCapability {}
